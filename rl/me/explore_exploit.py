import numpy as np

class BanditStat(object):

    def __init__(self):
        self.attempts = 0
        self.sum_of_x = 0
        self.predicted_mean = 0

    def update(self, x):
        self.sum_of_x += x
        self.attempts += 1


class Ucb1BanditStat(BanditStat):

    def __init__(self):
        BanditStat.__init__(self)

    def update(self, x, num_of_attempts):
        BanditStat.update(self, x)
        self.predicted_mean = (1 - 1.0/self.attempts)*self.predicted_mean + (1.0/self.attempts)*x


class BayesianBanditStat(BanditStat):

    def __init__(self):
        BanditStat.__init__(self)
        # parameters for mu - prior is N(0,1)
        self.lambda_ = 1
        self.tau = 1

    def sample(self):
        return np.random.randn() / np.sqrt(self.lambda_) + self.predicted_mean

    def update(self, x, num_of_attempts):
        BanditStat.update(self, x)
        self.lambda_ += self.tau
        self.predicted_mean = self.tau*self.sum_of_x / self.lambda_

